网店购物管理系统设计文档

1.需求分析
略
2.数据结构设计

本地文件：
	库存	//商品的各种信息，ID 名称 品牌 价格 数量（等于-1表示商品被删除）
	已售清单	//ID 名称 品牌 价格 数量 用户名
	用户	//用户名 密码
	用户名文件	//用户的购物车文件 ID 名称 品牌 价格 数量

数据结构：
	商品信息：
		ID	//长度为5的字符串，第一个为大写字母，后四位是自然数
		goods_name	//商品名称 字符串类型
		goods_brand	//品牌 字符串类型
		goods_price	//价格 浮点数类型
		goods_num	//数量 整数
	
	对商品信息进行的操作有：
		（管理员）查询：	检索，将没有被删除的商品输出。
		（管理员）删除：	将商品ID对应的商品数量置为-1。
		（管理员）增加：	检索，如果存在对应条目则更改数量，否则创建新的条目//ID+1。
		（管理员）修改：	检索，然后按要求修改价格，数量等等。

		（用户）查询：		列出数量大于0的商品
		（用户）搜索		通过商品名称（商品搜索）或者通过商品ID（购物车） 搜索商品。
		（用户）修改：		通过商品ID修改商品数量（购物车结账）
		
	
	售货记录：
		ID
		goods_name
		goods_brand
		goods_price	//卖出时候的价格
		goods_num	//本次卖出的数量
		user_name	//谁买的
	
	对售货记录的操作：
		（管理员）查询：	//从文件中读取售货记录，同一ID并且价格相同的条目合并，user_name忽略。
		（用户）增加：		//购物车结账完成后，将购物车信息写入售货记录

	
	用户信息：
		user_name	//用户名
		user_password	//密码
	
	对用户信息进行的操作：
		（系统）增加：	//注册用户时增加
		（系统）查询：	//注册时查询是否有重复用户名

	购物车：
		ID
		goods_name
		goods_brand
		goods_price
		goods_num
	
	对购物车进行的操作有：
		（管理员）删除条目，	//删除某商品时同步删除购物车里的商品
		（管理员）修改，	//修改商品价格时同步修改购物车信息
		（系统）创建，		//用户注册时创建该文件
		（用户）增加，		//购物时向购物车里增加商品
		（用户）修改数量，	//增加数量 = 向购物车里添加已有商品 减少数量 = 删除购物车商品
		（用户）计算总价格，	//结账时计算总价格
		（用户）清空购物车，	//结账完成后清空购物车，或输入清空指令清空


代码结构：
	使用面向对象的的设计思路，创建以下几个类：
		class goods{
			//商品
			//负责与文件“库存”交互
			//给管理员跟用户提供对商品进行操作的接口
		};
		class sell_list{
			//售货记录
			//负责与文件“已售清单”交互
			//给管理员跟用户提供对售后清单进行操作的接口
		};
		class shopping_cart{
			//用户的购物车
			//负责与用户对应的购物车文件进行操作
			//给管理员跟用户提供对购物车进行操作的接口
		};
		class Admin{
			//管理员登录时创建次对象
			//提供管理员界面交互GUI
		};
		class user{
			//用户登录时创建此对象
			//提供用户界面交互GUI
		};
		class ID{
			//负责商品ID的格式在int跟字符串直接互相转换，方便操作
		class file{
			//负责文件读写
		};

从文件中读取的数据用map存储，key值为ID value值为 struct {
						goods_name	//商品名称 字符串类型
						goods_brand	//品牌 字符串类型
						goods_price	//价格 浮点数类型
						goods_num	//数量 整数	
						next指针	//在读取 已售清单 时用到，用来插入相同的商品的不同价格
						}